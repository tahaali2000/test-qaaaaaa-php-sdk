<?php

declare(strict_types=1);

/*
 * TestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TestAPILib\Models;

use stdClass;
use TestAPILib\ApiHelper;
use TestAPILib\Utils\DateTimeHelper;

class UsersRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $username;

    /**
     * @var int
     */
    private $age;

    /**
     * @var bool|null
     */
    private $isActive;

    /**
     * @var float|null
     */
    private $rating;

    /**
     * @var \DateTime
     */
    private $signupDate;

    /**
     * @param int $age
     * @param \DateTime $signupDate
     */
    public function __construct(int $age, \DateTime $signupDate)
    {
        $this->age = $age;
        $this->signupDate = $signupDate;
    }

    /**
     * Returns Username.
     * User's username
     */
    public function getUsername(): ?string
    {
        return $this->username;
    }

    /**
     * Sets Username.
     * User's username
     *
     * @maps username
     */
    public function setUsername(?string $username): void
    {
        $this->username = $username;
    }

    /**
     * Returns Age.
     * User's age
     */
    public function getAge(): int
    {
        return $this->age;
    }

    /**
     * Sets Age.
     * User's age
     *
     * @required
     * @maps age
     */
    public function setAge(int $age): void
    {
        $this->age = $age;
    }

    /**
     * Returns Is Active.
     * Whether the user is active
     */
    public function getIsActive(): ?bool
    {
        return $this->isActive;
    }

    /**
     * Sets Is Active.
     * Whether the user is active
     *
     * @maps isActive
     */
    public function setIsActive(?bool $isActive): void
    {
        $this->isActive = $isActive;
    }

    /**
     * Returns Rating.
     * User's rating
     */
    public function getRating(): ?float
    {
        return $this->rating;
    }

    /**
     * Sets Rating.
     * User's rating
     *
     * @maps rating
     */
    public function setRating(?float $rating): void
    {
        $this->rating = $rating;
    }

    /**
     * Returns Signup Date.
     * Signup date
     */
    public function getSignupDate(): \DateTime
    {
        return $this->signupDate;
    }

    /**
     * Sets Signup Date.
     * Signup date
     *
     * @required
     * @maps signupDate
     * @factory \TestAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setSignupDate(\DateTime $signupDate): void
    {
        $this->signupDate = $signupDate;
    }

    /**
     * Converts the UsersRequest object to a human-readable string representation.
     *
     * @return string The string representation of the UsersRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'UsersRequest',
            [
                'username' => $this->username,
                'age' => $this->age,
                'isActive' => $this->isActive,
                'rating' => $this->rating,
                'signupDate' => $this->signupDate
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->username)) {
            $json['username'] = $this->username;
        }
        $json['age']          = $this->age;
        if (isset($this->isActive)) {
            $json['isActive'] = $this->isActive;
        }
        if (isset($this->rating)) {
            $json['rating']   = $this->rating;
        }
        $json['signupDate']   = DateTimeHelper::toSimpleDate($this->signupDate);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
